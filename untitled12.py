# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18v-dsQha8IRvE1FAEo26ihu__HROj9J7

**import requried librarie**
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt

"""**load data set**"""

df = pd.read_csv('/content/Profile of Body Metrics and Fashion Colors (1).csv')

"""**Check the Dataset**"""

print("Data Preview:")
print(df.head())
print("\nDataset Info:")
print(df.info())

"""**missing data handel**"""

df.dropna(inplace=True)

"""**encode catagrical colum**"""

label_encoders = {}
for col in df.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

print("\nAfter Encoding:")
print(df.head())

"""**Feature selection target**"""

X = df.iloc[:, :-1]  # all columns except last
y = df.iloc[:, -1]   # last column = target

column_names = ['Height(Centimeter)', 'Weight(Kilograms)', 'Gender', 'BMI', 'Skin Color', 'Clothes Color', 'Pants Color']
df = pd.read_csv('/content/Profile of Body Metrics and Fashion Colors (1).csv', sep=';', names=column_names, header=0)

# Function to extract RGB values from the color string
def extract_rgb(color_str):
    try:
        # Extract the numbers within the parentheses
        rgb_values = color_str.strip('()').split(' ')
        # Convert to integers, handling potential empty strings
        return [int(val) for val in rgb_values if val]
    except:
        return [np.nan, np.nan, np.nan] # Return NaN for invalid formats

# Apply the function to create new columns for Skin Color RGB
df[['Skin Color_R', 'Skin Color_G', 'Skin Color_B']] = df['Skin Color'].apply(extract_rgb).tolist()

# Apply the function to create new columns for Clothes Color RGB
df[['Clothes Color_R', 'Clothes Color_G', 'Clothes Color_B']] = df['Clothes Color'].apply(extract_rgb).tolist()

# Define features (X) and target (y)
X = df.drop(['Skin Color', 'Clothes Color', 'Pants Color'], axis=1) # Drop original color columns and target
y = df['Pants Color'] # Target column

X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42
)

knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

y_pred = knn.predict(X_test)

print("\nâœ… Model Evaluation")
print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("\nðŸ“Š Accuracy for Different K Values:")
for k in range(1, 11):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    pred = knn.predict(X_test)
    acc = accuracy_score(y_test, pred)
    print(f"K = {k}: Accuracy = {acc:.2f}")